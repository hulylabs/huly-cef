name: Release Huly CEF

on:
  push:
    branches:
      - 'release/v*.*.*'

defaults:
  run:
    shell: bash

permissions:
  contents: write

jobs:
  release:
    runs-on: ${{ matrix.os }}
    if: false
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Extract version from branch name
        id: version
        run: |
          BRANCH_NAME=${GITHUB_REF#refs/heads/}
          VERSION=${BRANCH_NAME#release/}
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "Version: ${VERSION}"
      
      - name: Check if release exists
        run: |
          VERSION=${{ steps.version.outputs.version }}   
          if gh release view "$VERSION" > /dev/null 2>&1; then
            echo "Release ${VERSION} already exists, skipping creation."
            exit 1
          fi

          echo "Release ${VERSION} does not exist, proceeding..."

      - name: Build Huly CEF
        run: |
          cargo run --bin huly-cef-build --release -- --profile release
      
      - name: Prepare artifacts
        run: |
          mkdir -p artifacts

          if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
            cd target/release && zip -r ../../artifacts/huly-cef-linux.zip huly-cef-websockets cef
            cd ../..
            sha256sum artifacts/huly-cef-linux.zip | cut -d' ' -f1 > artifacts/huly-cef-linux.zip.sha256
          elif [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            cp -r resources/pages huly-cef-resources
            powershell -Command "Compress-Archive -Path 'target/release/huly-cef-websockets.exe', 'cef/*', 'huly-cef-resources' -DestinationPath 'artifacts/huly-cef-windows.zip'"
            powershell -Command "(Get-FileHash -Algorithm SHA256 artifacts/huly-cef-windows.zip).Hash.ToLower() | Out-File -Encoding ASCII artifacts/huly-cef-windows.zip.sha256"
          fi
      
      - name: Create Release
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          VERSION=${{ steps.version.outputs.version }}

          if gh release view "$VERSION" > /dev/null 2>&1; then
            gh release upload "$VERSION" artifacts/*
          else
            gh release create "$VERSION" \
              --title "Huly CEF $VERSION" \
              artifacts/*
          fi

  release-macos:
    strategy:
      matrix:
        - path: target/release/huly-cef-websockets.app
          flags: ""
        - path: target/86_64-apple-darwin/release/huly-cef-websockets.app
          flags: "--target x86_64-apple-darwin"
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Extract version from branch name
        id: version
        run: |
          echo $(uname -m)
          BRANCH_NAME=${GITHUB_REF#refs/heads/}
          VERSION=${BRANCH_NAME#release/}
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "Version: ${VERSION}"
      
      - name: Check if release exists
        run: |
          VERSION=${{ steps.version.outputs.version }}   
          if gh release view "$VERSION" > /dev/null 2>&1; then
            echo "Release ${VERSION} already exists, skipping creation."
            exit 1
          fi

          echo "Release ${VERSION} does not exist, proceeding..."
      
      - name: Build Huly CEF
        run: |
          rustup target add x86_64-apple-darwin
          cargo run --bin huly-cef-build --release ${{ matrix.flags }} -- --profile release ${{ matrix.flags }}
          cp -r ${{ matrix.path }} huly-cef-websockets.app

      - name: Check CEF
        if: always()
        run: |
          ls artifacts

      - name: Import Apple Code Signing Certificates
        uses: apple-actions/import-codesign-certs@v3
        with:
          keychain: build
          p12-file-base64: ${{ secrets.APPLE_CERTIFICATE }}
          p12-password: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}

      - name: Create entitlements files
        run: |
          cat > main.entitlements << 'EOF'
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
             <key>com.apple.security.device.audio-input</key>
             <true/>
             <key>com.apple.security.device.bluetooth</key>
             <true/>
             <key>com.apple.security.device.camera</key>
             <true/>
             <key>com.apple.security.device.print</key>
             <true/>
             <key>com.apple.security.device.usb</key>
             <true/>
          </dict>
          </plist>
          EOF

          cat > helper.entitlements << 'EOF'
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
             <key>com.apple.security.cs.allow-unsigned-executable-memory</key>
             <true/>
             <key>com.apple.security.cs.disable-library-validation</key>
             <true/>
             <key>com.apple.security.cs.allow-jit</key>
             <true/>
          </dict>
          </plist>
          EOF
      
      - name: Sign Huly CEF App
        run: |
          find target/release/huly-cef-websockets.app -name '._*' -exec rm -rf {} \;

          CERT_INFO=$(security find-identity -v -p codesigning build.keychain | grep -E "(Apple Development|Developer ID|Apple Distribution)" | head -1)
          CERT_ID=$(echo "$CERT_INFO" | awk -F'"' '{print $2}')

          codesign --force --options runtime --sign "$CERT_ID" --timestamp --verbose \
            "target/release/huly-cef-websockets.app/Contents/Frameworks/Chromium Embedded Framework.framework/Libraries/libEGL.dylib"
          codesign --force --options runtime --sign "$CERT_ID" --timestamp --verbose \
            "target/release/huly-cef-websockets.app/Contents/Frameworks/Chromium Embedded Framework.framework/Libraries/libGLESv2.dylib"
          codesign --force --options runtime --sign "$CERT_ID" --timestamp --verbose \
            "target/release/huly-cef-websockets.app/Contents/Frameworks/Chromium Embedded Framework.framework/Libraries/libvk_swiftshader.dylib"
          codesign --force --options runtime --sign "$CERT_ID" --timestamp --verbose \
            "target/release/huly-cef-websockets.app/Contents/Frameworks/Chromium Embedded Framework.framework"
          codesign --verify --deep --strict --verbose=2 \
            "target/release/huly-cef-websockets.app/Contents/Frameworks/Chromium Embedded Framework.framework"

          codesign --force --options runtime --entitlements "helper.entitlements" --sign "$CERT_ID" --timestamp --verbose \
            "target/release/huly-cef-websockets.app/Contents/Frameworks/huly-cef-websockets Helper (Alerts).app"
          codesign --force --options runtime --entitlements "helper.entitlements" --sign "$CERT_ID" --timestamp --verbose \
            "target/release/huly-cef-websockets.app/Contents/Frameworks/huly-cef-websockets Helper (GPU).app"
          codesign --force --options runtime --entitlements "helper.entitlements" --sign "$CERT_ID" --timestamp --verbose \
            "target/release/huly-cef-websockets.app/Contents/Frameworks/huly-cef-websockets Helper (Plugin).app"
          codesign --force --options runtime --entitlements "helper.entitlements" --sign "$CERT_ID" --timestamp --verbose \
            "target/release/huly-cef-websockets.app/Contents/Frameworks/huly-cef-websockets Helper (Renderer).app"
          codesign --force --options runtime --entitlements "helper.entitlements" --sign "$CERT_ID" --timestamp --verbose \
            "target/release/huly-cef-websockets.app/Contents/Frameworks/huly-cef-websockets Helper.app"
          codesign --force --options runtime --entitlements "main.entitlements" --sign "$CERT_ID" --timestamp --verbose \
            "target/release/huly-cef-websockets.app"

          codesign --verify --deep --strict --verbose=2 "target/release/huly-cef-websockets.app"

      - name: Notarize Huly CEF App
        env:
          APPLE_API_KEY: ${{ secrets.APPLE_API_KEY }}
          APPLE_API_ISSUER: ${{ secrets.APPLE_API_ISSUER }}
          APPLE_API_KEY_BASE64: ${{ secrets.APPLE_API_KEY_BASE64 }}
        run: |
          cd target/release
          echo "$APPLE_API_KEY_BASE64" | base64 --decode > AuthKey_$APPLE_API_KEY.p8
          ditto -c -k --keepParent huly-cef-websockets.app huly-cef-websockets.zip

          xcrun notarytool submit huly-cef-websockets.zip \
            --key AuthKey_$APPLE_API_KEY.p8 \
            --key-id $APPLE_API_KEY \
            --issuer $APPLE_API_ISSUER \
            --wait

          xcrun stapler staple huly-cef-websockets.app
          xcrun stapler validate huly-cef-websockets.app

      - name: Prepare artifacts
        run: |
          mkdir -p artifacts

          cd target/release && zip -r ../../artifacts/huly-cef-macos.zip huly-cef-websockets.app
          cd ../..
          sha256sum artifacts/huly-cef-macos.zip | cut -d' ' -f1 > artifacts/huly-cef-macos.zip.sha256
      
      # - name: Create Release
      #   env:
      #     GH_TOKEN: ${{ github.token }}
      #   run: |
      #     VERSION=${{ steps.version.outputs.version }}

      #     if gh release view "$VERSION" > /dev/null 2>&1; then
      #       gh release upload "$VERSION" artifacts/*
      #     else
      #       gh release create "$VERSION" \
      #         --title "Huly CEF $VERSION" \
      #         artifacts/*
      #     fi